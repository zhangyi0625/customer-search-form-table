import { createRequire } from "node:module";
import node_path from "node:path";
import { fileURLToPath, pathToFileURL } from "node:url";
import deepmerge from "deepmerge";
import { reduceConfigsWithContext } from "reduce-configs";
import resolve_url_loader from "../compiled/resolve-url-loader/index.js";
let GLOBAL_PATCHED_SYMBOL = Symbol('GLOBAL_PATCHED_SYMBOL');
function patchGlobalLocation() {
    if (!global.location) {
        let location = Object.freeze({
            [GLOBAL_PATCHED_SYMBOL]: !0,
            href: pathToFileURL(process.cwd()).href + node_path.sep
        });
        global.location = location;
    }
}
function unpatchGlobalLocation() {
    var _global_location;
    (null == (_global_location = global.location) ? void 0 : _global_location[GLOBAL_PATCHED_SYMBOL]) && delete global.location;
}
let getResolveUrlJoinFn = async ()=>{
    let { createJoinFunction, asGenerator, createJoinImplementation, defaultJoinGenerator } = resolve_url_loader;
    return createJoinFunction('rsbuild-resolve-join-fn', createJoinImplementation(asGenerator((item, ...rest)=>item.uri.startsWith('.') ? defaultJoinGenerator(item, ...rest) : [
            null
        ])));
}, src_dirname = node_path.dirname(fileURLToPath(import.meta.url)), src_require = createRequire(import.meta.url), PLUGIN_SASS_NAME = 'rsbuild:sass', findRuleId = (chain, defaultId)=>{
    let id = defaultId, index = 0;
    for(; chain.module.rules.has(id);)id = `${defaultId}-${++index}`;
    return id;
}, pluginSass = (pluginOptions = {})=>({
        name: PLUGIN_SASS_NAME,
        setup (api) {
            let { rewriteUrls = !0, include = /\.s(?:a|c)ss$/ } = pluginOptions, RAW_QUERY_REGEX = /^\?raw$/, INLINE_QUERY_REGEX = /^\?inline$/;
            api.onAfterCreateCompiler(({ compiler })=>{
                compiler.hooks.run.tap('PatchGlobalLocation', patchGlobalLocation), compiler.hooks.watchRun.tap('PatchGlobalLocation', patchGlobalLocation), compiler.hooks.watchClose.tap('PatchGlobalLocation', unpatchGlobalLocation), compiler.hooks.done.tap('PatchGlobalLocation', unpatchGlobalLocation);
            }), api.modifyBundlerChain(async (chain, { CHAIN_ID, environment })=>{
                var callback;
                let { config } = environment, { sourceMap } = config.output, isUseSourceMap = 'boolean' == typeof sourceMap ? sourceMap : sourceMap.css, { excludes, options } = ((userOptions, isUseCssSourceMap)=>{
                    let excludes = [], mergedOptions = reduceConfigsWithContext({
                        initial: {
                            sourceMap: isUseCssSourceMap,
                            api: 'modern-compiler',
                            implementation: src_require.resolve('sass-embedded'),
                            sassOptions: {
                                quietDeps: !0
                            }
                        },
                        config: userOptions,
                        ctx: {
                            addExcludes: (items)=>{
                                excludes.push(...Array.isArray(items) ? items : [
                                    items
                                ]);
                            }
                        },
                        mergeFn: (defaults, userOptions)=>({
                                ...defaults,
                                ...userOptions,
                                sassOptions: defaults.sassOptions && userOptions.sassOptions ? deepmerge(defaults.sassOptions, userOptions.sassOptions) : userOptions.sassOptions || defaults.sassOptions
                            })
                    });
                    return mergedOptions.sassOptions ||= {}, mergedOptions.sassOptions.silenceDeprecations || (mergedOptions.sassOptions.silenceDeprecations = [
                        'import'
                    ], 'legacy' === mergedOptions.api && mergedOptions.sassOptions.silenceDeprecations.push('legacy-js-api')), {
                        options: mergedOptions,
                        excludes
                    };
                })(pluginOptions.sassLoaderOptions, !!rewriteUrls || isUseSourceMap), rule = chain.module.rule(findRuleId(chain, CHAIN_ID.RULE.SASS)).test(include).resourceQuery({
                    not: [
                        RAW_QUERY_REGEX,
                        INLINE_QUERY_REGEX
                    ]
                }).sideEffects(!0).resolve.preferRelative(!0).end(), inlineRule = CHAIN_ID.RULE.CSS_INLINE && chain.module.rules.has(CHAIN_ID.RULE.CSS_INLINE) ? chain.module.rule(findRuleId(chain, CHAIN_ID.RULE.SASS_INLINE)).test(include).resourceQuery(INLINE_QUERY_REGEX) : null;
                chain.module.rule(CHAIN_ID.RULE.SASS_RAW).test(include).type('asset/source').resourceQuery(RAW_QUERY_REGEX);
                let sassLoaderPath = node_path.join(src_dirname, '../compiled/sass-loader/index.js'), resolveUrlLoaderPath = node_path.join(src_dirname, '../compiled/resolve-url-loader/index.js'), resolveUrlLoaderOptions = {
                    join: await getResolveUrlJoinFn(),
                    sourceMap: !1
                };
                (callback = (rule, type)=>{
                    for (let item of excludes)rule.exclude.add(item);
                    pluginOptions.exclude && rule.exclude.add(pluginOptions.exclude);
                    let cssRule = chain.module.rules.get('normal' === type ? CHAIN_ID.RULE.CSS : CHAIN_ID.RULE.CSS_INLINE);
                    for (let id of (rule.dependency(cssRule.get('dependency')), Object.keys(cssRule.uses.entries()))){
                        let loader = cssRule.uses.get(id), clonedOptions = deepmerge({}, loader.get('options') ?? {});
                        id === CHAIN_ID.USE.CSS && (clonedOptions.importLoaders += rewriteUrls ? 2 : 1), rule.use(id).loader(loader.get('loader')).options(clonedOptions);
                    }
                    rewriteUrls && rule.use(CHAIN_ID.USE.RESOLVE_URL).loader(resolveUrlLoaderPath).options(resolveUrlLoaderOptions).end(), rule.use(CHAIN_ID.USE.SASS).loader(sassLoaderPath).options(options);
                })(rule, 'normal'), inlineRule && callback(inlineRule, 'inline');
            });
        }
    });
export { PLUGIN_SASS_NAME, pluginSass };
