import type { IncomingMessage } from 'node:http';
import type { Socket } from 'node:net';
import type { DevConfig, EnvironmentContext, Rspack } from '../types';
import type { SockWriteType } from './devServer';
interface SocketMessage {
    type: SockWriteType;
    data?: Record<string, any> | string | boolean;
}
export declare class SocketServer {
    private wsServer;
    private readonly sockets;
    private readonly options;
    private stats;
    private initialChunks;
    private heartbeatTimer;
    private environments;
    constructor(options: DevConfig, environments: Record<string, EnvironmentContext>);
    upgrade: (req: IncomingMessage, socket: Socket, head: Buffer) => void;
    private checkSockets;
    private clearHeartbeatTimer;
    prepare(): Promise<void>;
    updateStats(stats: Rspack.Stats, token: string): void;
    /**
     * Write message to each socket
     * @param message - The message to send
     * @param token - The token of the socket to send the message to,
     * if not provided, the message will be sent to all sockets
     */
    sockWrite(message: SocketMessage, token?: string): void;
    private singleWrite;
    close(): Promise<void>;
    private onConnect;
    private getStats;
    private sendStats;
    private send;
}
export {};
