"use strict";
let __rslib_import_meta_url__ = 'undefined' == typeof document ? new (require('url'.replace('', ''))).URL('file:' + __filename).href : document.currentScript && document.currentScript.src || new URL('main.js', document.baseURI).href;
var __webpack_modules__ = {
    "@rspack/plugin-react-refresh": function(module) {
        module.exports = import("@rspack/plugin-react-refresh").then(function(module) {
            return module;
        });
    }
}, __webpack_module_cache__ = {};
function __webpack_require__(moduleId) {
    var cachedModule = __webpack_module_cache__[moduleId];
    if (void 0 !== cachedModule) return cachedModule.exports;
    var module = __webpack_module_cache__[moduleId] = {
        exports: {}
    };
    return __webpack_modules__[moduleId](module, module.exports, __webpack_require__), module.exports;
}
__webpack_require__.n = (module)=>{
    var getter = module && module.__esModule ? ()=>module.default : ()=>module;
    return __webpack_require__.d(getter, {
        a: getter
    }), getter;
}, __webpack_require__.d = (exports1, definition)=>{
    for(var key in definition)__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key) && Object.defineProperty(exports1, key, {
        enumerable: !0,
        get: definition[key]
    });
}, __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop), __webpack_require__.r = (exports1)=>{
    'undefined' != typeof Symbol && Symbol.toStringTag && Object.defineProperty(exports1, Symbol.toStringTag, {
        value: 'Module'
    }), Object.defineProperty(exports1, '__esModule', {
        value: !0
    });
};
var __webpack_exports__ = {};
for(var __webpack_i__ in (()=>{
    __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
        PLUGIN_REACT_NAME: ()=>PLUGIN_REACT_NAME,
        pluginReact: ()=>pluginReact
    });
    let external_node_module_namespaceObject = require("node:module"), external_node_path_namespaceObject = require("node:path");
    var external_node_path_default = __webpack_require__.n(external_node_path_namespaceObject);
    let react_require = (0, external_node_module_namespaceObject.createRequire)(__rslib_import_meta_url__), PLUGIN_REACT_NAME = 'rsbuild:react', pluginReact = (options = {})=>({
            name: PLUGIN_REACT_NAME,
            setup (api) {
                let finalOptions = {
                    fastRefresh: !0,
                    enableProfiler: !1,
                    ...options
                };
                if ('rspack' === api.context.bundlerType) {
                    let hasReactDomClientCache;
                    var api1, api2 = api, options1 = finalOptions;
                    let REACT_REFRESH_PATH = options1.fastRefresh ? react_require.resolve('react-refresh') : '';
                    api2.modifyEnvironmentConfig((config, { mergeEnvironmentConfig })=>{
                        let isDev = 'development' === config.mode, usingHMR = isDev && config.dev.hmr && 'web' === config.output.target;
                        return mergeEnvironmentConfig({
                            tools: {
                                swc: {
                                    jsc: {
                                        parser: {
                                            syntax: "typescript",
                                            tsx: !0
                                        },
                                        transform: {
                                            react: {
                                                development: isDev,
                                                refresh: usingHMR && options1.fastRefresh,
                                                runtime: 'automatic',
                                                ...options1.swcReactOptions
                                            }
                                        }
                                    }
                                }
                            }
                        }, config);
                    }), api2.modifyBundlerChain(async (chain, { CHAIN_ID, environment, isDev, target })=>{
                        let { config } = environment;
                        if (!(isDev && config.dev.hmr && 'web' === target) || !options1.fastRefresh) return;
                        chain.resolve.alias.set('react-refresh', external_node_path_default().dirname(REACT_REFRESH_PATH));
                        let { ReactRefreshRspackPlugin } = await Promise.resolve().then(__webpack_require__.bind(__webpack_require__, "@rspack/plugin-react-refresh"));
                        chain.plugin(CHAIN_ID.PLUGIN.REACT_FAST_REFRESH).use(ReactRefreshRspackPlugin, [
                            {
                                include: [
                                    /\.(?:js|jsx|mjs|cjs|ts|tsx|mts|cts)$/
                                ],
                                exclude: [
                                    /[\\/]node_modules[\\/]/
                                ],
                                resourceQuery: {
                                    not: /^\?raw$/
                                },
                                ...options1.reactRefreshOptions
                            }
                        ]);
                    }), finalOptions.enableProfiler && ((api1 = api).modifyEnvironmentConfig((config, { mergeEnvironmentConfig })=>{
                        if ('production' === config.mode) return mergeEnvironmentConfig(config, {
                            output: {
                                minify: {
                                    jsOptions: {
                                        minimizerOptions: {
                                            mangle: {
                                                keep_classnames: !0,
                                                keep_fnames: !0
                                            }
                                        }
                                    }
                                }
                            }
                        });
                    }), api1.modifyBundlerChain((chain, { isProd })=>{
                        isProd && (chain.resolve.alias.set((()=>{
                            if (void 0 !== hasReactDomClientCache) return hasReactDomClientCache;
                            try {
                                react_require.resolve('react-dom/client', {
                                    paths: [
                                        api1.context.rootPath
                                    ]
                                }), hasReactDomClientCache = !0;
                            } catch  {
                                hasReactDomClientCache = !1;
                            }
                            return hasReactDomClientCache;
                        })() ? 'react-dom/client$' : 'react-dom$', 'react-dom/profiling'), chain.resolve.alias.set('scheduler/tracing', 'scheduler/tracing-profiling'));
                    }));
                }
                ((api, options = {
                    react: !0,
                    router: !0
                })=>{
                    api.modifyBundlerChain((chain, { environment, isProd })=>{
                        let obj, { config } = environment;
                        if ('split-by-experience' !== config.performance.chunkSplit.strategy) return;
                        let currentConfig = chain.optimization.splitChunks.values();
                        if (null === (obj = currentConfig) || 'object' != typeof obj || '[object Object]' !== Object.prototype.toString.call(obj)) return;
                        let extraGroups = {};
                        options.react && (extraGroups.react = {
                            name: 'lib-react',
                            test: isProd ? /node_modules[\\/](?:react|react-dom|scheduler)[\\/]/ : /node_modules[\\/](?:react|react-dom|scheduler|react-refresh|@rspack[\\/]plugin-react-refresh)[\\/]/,
                            priority: 0
                        }), options.router && (extraGroups.router = {
                            name: 'lib-router',
                            test: /node_modules[\\/](?:react-router|react-router-dom|history|@remix-run[\\/]router)[\\/]/,
                            priority: 0
                        }), Object.keys(extraGroups).length && chain.optimization.splitChunks({
                            ...currentConfig,
                            cacheGroups: {
                                ...extraGroups,
                                ...currentConfig.cacheGroups
                            }
                        });
                    });
                })(api, null == finalOptions ? void 0 : finalOptions.splitChunks);
            }
        });
})(), exports.PLUGIN_REACT_NAME = __webpack_exports__.PLUGIN_REACT_NAME, exports.pluginReact = __webpack_exports__.pluginReact, __webpack_exports__)-1 === [
    "PLUGIN_REACT_NAME",
    "pluginReact"
].indexOf(__webpack_i__) && (exports[__webpack_i__] = __webpack_exports__[__webpack_i__]);
Object.defineProperty(exports, '__esModule', {
    value: !0
});
