import type { IncomingMessage, Server } from 'node:http';
import type { Http2SecureServer } from 'node:http2';
import type { Socket } from 'node:net';
import type { InternalContext, NormalizedConfig, OutputStructure, PrintUrls, Routes, RsbuildEntry } from '../types';
/**
 * It used to subscribe http upgrade event
 */
export type UpgradeEvent = (req: IncomingMessage, socket: Socket, head: any) => void;
export type StartServerResult = {
    /**
     * The URLs that server is listening on.
     */
    urls: string[];
    /**
     * The actual port used by the server.
     */
    port: number;
    server: {
        /**
         * Close the server.
         * In development mode, this will call the `onCloseDevServer` hook.
         */
        close: () => Promise<void>;
    };
};
export declare const normalizeUrl: (url: string) => string;
export declare const joinUrlSegments: (s1: string, s2: string) => string;
export declare const stripBase: (path: string, base: string) => string;
export declare const getRoutes: (context: InternalContext) => Routes;
export declare const formatRoutes: (entry: RsbuildEntry, base: string, distPathPrefix: string | undefined, outputStructure: OutputStructure | undefined) => Routes;
export declare function printServerURLs({ urls: originalUrls, port, routes, protocol, printUrls, trailingLineBreak, }: {
    urls: Array<{
        url: string;
        label: string;
    }>;
    port: number;
    routes: Routes;
    protocol: string;
    printUrls?: PrintUrls;
    trailingLineBreak?: boolean;
}): string | null;
/**
 * Get available free port.
 * @param port - Current port want to use.
 * @param tryLimits - Maximum number of retries.
 * @param strictPort - Whether to throw an error when the port is occupied.
 * @returns Available port number.
 */
export declare const getPort: ({ host, port, strictPort, tryLimits, }: {
    host: string;
    port: string | number;
    strictPort: boolean;
    tryLimits?: number;
}) => Promise<number>;
export declare const getServerConfig: ({ config, }: {
    config: NormalizedConfig;
}) => Promise<{
    port: number;
    host: string;
    https: boolean;
    portTip: string | undefined;
}>;
export declare const isWildcardHost: (host: string) => boolean;
export declare const getHostInUrl: (host: string) => Promise<string>;
type AddressUrl = {
    label: string;
    url: string;
};
export declare const getAddressUrls: ({ protocol, port, host, }: {
    protocol?: string;
    port: number;
    host?: string;
}) => Promise<AddressUrl[]>;
export declare function getServerTerminator(server: Server | Http2SecureServer): () => Promise<void>;
/**
 * Escape HTML characters
 * @example
 * escapeHtml('<div>Hello</div>') // '&lt;div&gt;Hello&lt;/div&gt;'
 */
export declare function escapeHtml(text: string | null | undefined): string;
export {};
