import node_fs from "node:fs";
import { basename, dirname, isAbsolute, join, normalize, relative, resolve } from "node:path";
import { logger } from "@rsbuild/core";
import picocolors from "picocolors";
import { emitDts } from "./tsc.js";
import { calcLongestCommonPath, ensureTempDeclarationDir } from "./utils.js";
const isObject = (obj)=>'[object Object]' === Object.prototype.toString.call(obj);
const calcBundledPackages = (options)=>{
    const { cwd, autoExternal, userExternals, overrideBundledPackages } = options;
    if (overrideBundledPackages) return overrideBundledPackages;
    let pkgJson;
    try {
        const content = node_fs.readFileSync(join(cwd, 'package.json'), 'utf-8');
        pkgJson = JSON.parse(content);
    } catch (_err) {
        logger.warn('The type of third-party packages will not be bundled due to read package.json failed');
        return [];
    }
    const externalOptions = autoExternal ? {
        dependencies: true,
        peerDependencies: true,
        optionalDependencies: true,
        devDependencies: false,
        ...true === autoExternal ? {} : autoExternal
    } : {
        dependencies: false,
        peerDependencies: false,
        devDependencies: false
    };
    const getUserExternalsKeys = (value)=>{
        if (!value) return [];
        if ('string' == typeof value || value instanceof RegExp) return [
            value
        ];
        if (Array.isArray(value)) return value.flatMap((v)=>getUserExternalsKeys(v));
        if (isObject(userExternals)) return Object.keys(userExternals);
        return [];
    };
    const externals = getUserExternalsKeys(userExternals);
    const allDeps = [];
    for (const type of [
        'dependencies',
        'peerDependencies',
        'devDependencies'
    ]){
        const deps = pkgJson[type] && Object.keys(pkgJson[type]);
        if (deps) {
            if (externalOptions[type]) externals.push(...deps);
            allDeps.push(...deps);
        }
    }
    const bundledPackages = allDeps.filter((d)=>!externals.some((e)=>'string' == typeof e ? d === e : e.test(d)));
    return Array.from(new Set(bundledPackages));
};
async function generateDts(data) {
    const { bundle, dtsEntry, dtsEmitPath, tsconfigPath, tsConfigResult, name, cwd, build, isWatch, dtsExtension = '.d.ts', autoExternal = true, userExternals, apiExtractorOptions, banner, footer, redirect = {
        path: true,
        extension: false
    } } = data;
    if (!isWatch) logger.start(`generating declaration files... ${picocolors.gray(`(${name})`)}`);
    const { options: rawCompilerOptions, fileNames } = tsConfigResult;
    const rootDir = rawCompilerOptions.rootDir ?? (rawCompilerOptions.composite ? dirname(tsconfigPath) : await calcLongestCommonPath(fileNames.filter((fileName)=>!/\.d\.(ts|mts|cts)$/.test(fileName)))) ?? dirname(tsconfigPath);
    const resolvedDtsEmitPath = normalize(resolve(dirname(tsconfigPath), dtsEmitPath));
    if (build) {
        if (bundle) throw Error('Can not set "dts.bundle: true" when "dts.build: true"');
        if ((!rawCompilerOptions.outDir || normalize(rawCompilerOptions.outDir) !== resolvedDtsEmitPath) && (!rawCompilerOptions.declarationDir || normalize(rawCompilerOptions.declarationDir) !== resolvedDtsEmitPath)) throw Error(`Please set "declarationDir": "${dtsEmitPath}" in ${picocolors.underline(tsconfigPath)} to keep it same as "dts.distPath" or "output.distPath.root" field in lib config.`);
    }
    const declarationDir = bundle ? ensureTempDeclarationDir(cwd, name) : dtsEmitPath;
    let dtsEntries = [];
    if (true === bundle) dtsEntries = dtsEntry.map((entryObj)=>{
        const { name: entryName, path: entryPath } = entryObj;
        if (!entryPath) return null;
        const entrySourcePath = isAbsolute(entryPath) ? entryPath : join(cwd, entryPath);
        const relativePath = relative(rootDir, dirname(entrySourcePath));
        const newPath = join(declarationDir, relativePath, basename(entrySourcePath)).replace(/\.(js|mjs|jsx|ts|mts|tsx|cjs|cts|cjsx|ctsx|mjsx|mtsx)$/, '.d.ts');
        return {
            name: entryName,
            path: newPath
        };
    }).filter(Boolean);
    const bundleDtsIfNeeded = async ()=>{
        if (true === bundle) {
            const { bundleDts } = await import("./apiExtractor.js");
            await bundleDts({
                name,
                cwd,
                distPath: dtsEmitPath,
                dtsEntry: dtsEntries,
                tsconfigPath,
                dtsExtension,
                banner,
                footer,
                bundledPackages: calcBundledPackages({
                    cwd,
                    autoExternal,
                    userExternals,
                    overrideBundledPackages: apiExtractorOptions?.bundledPackages
                })
            });
        }
    };
    const onComplete = async (isSuccess)=>{
        if (isSuccess) await bundleDtsIfNeeded();
    };
    await emitDts({
        name,
        cwd,
        configPath: tsconfigPath,
        tsConfigResult,
        declarationDir,
        dtsExtension,
        redirect,
        rootDir,
        banner,
        footer
    }, onComplete, bundle, isWatch, build);
    if (!isWatch) await bundleDtsIfNeeded();
}
process.on('message', async (data)=>{
    if (!data.cwd) return;
    try {
        await generateDts(data);
    } catch (e) {
        logger.error(e);
        process.send('error');
        process.exit(1);
    }
    process.send('success');
    if (!data.isWatch) process.exit();
});
export { calcBundledPackages, generateDts };
